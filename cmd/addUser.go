package cmd

import (
	"context"
	"fmt"
	"os"

	"github.com/cheynewallace/tabby"
	"github.com/mainawycliffe/kamanda/firebase/auth"
	"github.com/mainawycliffe/kamanda/utils"
	"github.com/mainawycliffe/kamanda/views"
	"github.com/spf13/cobra"
)

// addUserCmd represents the addUser command
var addUserCmd = &cobra.Command{
	Use:     "addUser",
	Aliases: []string{"add-user", "add"},
	Example: `kamanda auth addUser --email email@example.com --password 1234 --custom-claims "admin=true" --custom-claims "key:value"`,
	Short:   "Add a new Firebase Email/Password user (Accepts Custom Claims)",
	Long: `Creates a new Firebase User (Email/Password). Both the Email and the Password are required. 

You can also add custom claims using --custom-claims="key:value" flag.`,
	Run: func(cmd *cobra.Command, args []string) {
		output, err := cmd.Flags().GetString("output")
		if err != nil {
			utils.StdOutError(os.Stderr, "Error reading output: %s", err.Error())
			os.Exit(1)
		}
		if output != "json" && output != "yaml" && output != "" {
			utils.StdOutError(os.Stderr, "Unsupported output!")
			os.Exit(1)
		}
		UID, _ := cmd.Flags().GetString("uid")
		email, _ := cmd.Flags().GetString("email")
		password, _ := cmd.Flags().GetString("password")
		emailVerified, _ := cmd.Flags().GetBool("emailVerified")
		phone, _ := cmd.Flags().GetString("phone")
		name, _ := cmd.Flags().GetString("name")
		photoURL, _ := cmd.Flags().GetString("photoURL")
		isDisabled, _ := cmd.Flags().GetBool("isDisabled")
		customClaimsInput, _ := cmd.Flags().GetStringToString("customClaims")
		user := &auth.NewUser{
			UID:           UID,
			Email:         email,
			EmailVerified: emailVerified,
			PhoneNumber:   phone,
			DisplayName:   name,
			Password:      password,
			PhotoURL:      photoURL,
			Disabled:      isDisabled,
		}
		userRecord, err := auth.NewFirebaseUser(context.Background(), user)
		if err != nil {
			utils.StdOutError(os.Stderr, "%s\n", err.Error())
			os.Exit(1)
		}
		if len(customClaimsInput) == 0 {
			customClaims := utils.ProcessCustomClaimInput(customClaimsInput)
			err = auth.AddCustomClaimToFirebaseUser(context.Background(), userRecord.UID, customClaims)
			if err != nil {
				utils.StdOutError(os.Stderr, "%s\n", err.Error())
				os.Exit(1)
			}
		}
		formatedUsers, err := utils.FormatResults(userRecord, output)
		if err != nil && err.Error() != "Unknown Format" {
			utils.StdOutError(os.Stderr, "%s\n", err.Error())
			os.Exit(1)
		}
		if formatedUsers != nil {
			fmt.Printf("%s\n", formatedUsers)
			os.Exit(0)
		}
		// this is when no output is specified
		utils.StdOutSuccess(os.Stdout, "The following users have been added successfully\n")
		header := []interface{}{"UID", "Email", "Email Verified", "Display Name", "Phone", "Disabled"}
		row := []interface{}{
			userRecord.UID,
			userRecord.Email,
			userRecord.EmailVerified,
			userRecord.DisplayName,
			userRecord.PhoneNumber,
			userRecord.Disabled,
		}
		views.SimpleTableList(tabby.New(), header, row).Print()
		os.Exit(0)
	},
}

func init() {
	authCmd.AddCommand(addUserCmd)
	addUserCmd.Flags().String("uid", "", "the uid of the user. autogenerated if absent")
	addUserCmd.Flags().String("email", "", "the email of the new user (Required)")
	addUserCmd.Flags().String("password", "", "the password of the new user (Required)")
	addUserCmd.Flags().Bool("emailVerified", false, "is the email verified")
	addUserCmd.Flags().String("phone", "", "the phone number of the user")
	addUserCmd.Flags().String("name", "", "the name of the user")
	addUserCmd.Flags().String("photoURL", "", "the photo url of the user")
	addUserCmd.Flags().Bool("isDisabled", false, "is the user account disabled")
	addUserCmd.Flags().StringToStringP("customClaims", "c", nil, "user custom claims i.e. --customClaims \"admin=true\"")
	if err := addUserCmd.MarkFlagRequired("email"); err != nil {
		utils.StdOutError(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}
	if err := addUserCmd.MarkFlagRequired("password"); err != nil {
		utils.StdOutError(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}
}
