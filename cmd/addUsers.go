package cmd

import (
	"context"
	"os"

	"github.com/mainawycliffe/kamanda/firebase/auth"
	"github.com/mainawycliffe/kamanda/utils"
	"github.com/spf13/cobra"
)

// addUsersCmd represents the addUsers command
var addUsersCmd = &cobra.Command{
	Use:     "addUsers",
	Aliases: []string{"add-users"},
	Short:   "Add multiple users from file (JSON/YAML)",
	Long: `Add users from a JSON/YAML File. 
	
The following fields are accepted:	
- customClaims (key-value map) - user custom claims		
- email (Required, string) - the email of the new user
- emailVerified (boolean) - is the email verified
- isDisabled (boolean) - is the user account disabled
- name (string) - the name of the user
- password (required, string) - the password of the new user
- phone (string) - the phone number of the user
- photoURL (string) - the photo url of the user
- uid (string) - the uid of the user. autogenerated if absent
	`,
	Example: `kamanda auth add-users --src users.json --extension json`,
	Run: func(cmd *cobra.Command, args []string) {
		sourceFile, _ := cmd.Flags().GetString("source")
		sourceFileExtension, _ := cmd.Flags().GetString("extension")
		file, err := os.Stat(sourceFile)
		if err != nil && !os.IsNotExist(err) {
			utils.StdOutError(os.Stderr, "Source file doesn't exist!")
			os.Exit(1)
		}
		if file.IsDir() {
			utils.StdOutError(os.Stderr, "%s Source file is a directory not folder!", sourceFile)
			os.Exit(1)
		}
		var usersToCreate []auth.FirebaseUser
		err = utils.UnmarshalFormatFile(sourceFile, sourceFileExtension, &usersToCreate)
		if err != nil {
			utils.StdOutError(os.Stderr, "Error decoding your config file: %s", err.Error())
			os.Exit(1)
		}
		failedAccountCreation := 0
		for _, v := range usersToCreate {
			userRecord, err := auth.NewFirebaseUser(context.Background(), &v)
			if err != nil {
				// @todo: unwrap the errors properly to better error messages
				utils.StdOutError(os.Stderr, "%s Failed - %s", v.Email, err.Error())
				failedAccountCreation++
				continue
			}
			customClaims := make(map[string]interface{})
			for _, v := range v.CustomClaims {
				customClaims[v.Key] = v.Value
			}
			err = auth.AddCustomClaimToFirebaseUser(context.Background(), userRecord.UID, customClaims)
			if err != nil {
				utils.StdOutError(os.Stderr, "%s Failed - %s", v.Email, err.Error())
				failedAccountCreation++
				continue
			}
			utils.StdOutSuccess(os.Stdout, "✔✔ email: %s SUCCESS \t uid: %s \n", userRecord.Email, userRecord.UID)
		}
		if failedAccountCreation > 0 {
			os.Exit(1)
		}
		os.Exit(0)
	},
}

func init() {
	authCmd.AddCommand(addUsersCmd)
	addUsersCmd.Flags().StringP("source", "s", "", "file with list of users to create")
	if err := addUsersCmd.MarkFlagRequired("source"); err != nil {
		utils.StdOutError(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}
	addUsersCmd.Flags().StringP("extension", "e", "yaml", "Source file type - json or yaml")
	if err := addUsersCmd.MarkFlagRequired("extension"); err != nil {
		utils.StdOutError(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}
}
